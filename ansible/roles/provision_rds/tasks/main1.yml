---
# Role to provision DB instances on EC2

vars:
  - keypair: galleria
  #t1.micro instance has no instance memory ans so incurs extra cost in ebs storage. avoiding complexity by using
  #smallest regular instance
  - instance_type:  m1.small
  - db_security_group: dbsecuritygroup
  - region: "eu-west-1"

name: Just say hi
debug: msg="Hi"

fail: msg="Stopping.  You need to define the database_password variable, see personal.yml file at ~/projects"
when: database_password is not defined

fail: msg="Stopping.  You need to define the project_name variable, see vars.yml"
when: project_name is not defined

name: What is the db password
# Example that prints the loopback address and gateway for each host
debug: msg="Password is (now) |{{ database_password }}| "

name: What is the db password
# Example that prints the loopback address and gateway for each host
debug: msg="Password is (now) |{{ database_password }}| "

# Basic postgres provisioning example
# The db.t1.micro is slow to start at about 4-500 seconds
rds: >
  command=create
  instance_name={{ db_instance }}
  db_engine=postgres
  size=10
  instance_type=db.t1.micro
  username=postgres_admin
  security_groups={{ db_security_group}}
  region={{ region }}
  password={{ database_password }}
  wait=true
  wait_timeout=900
register: ec2_db

name: Display all variables/facts known for a host
debug: var=hostvars[inventory_hostname]
with_items: ec2_db.instances

  # Secondly add it as a current variable so that subsequent playbooks can use it.
  # When playbooks are rerun it shouldb e brought up as a another version.
hosts: local
vars:
  database_endpoint: "{{ ec2_db.instance.endpoint }}"
