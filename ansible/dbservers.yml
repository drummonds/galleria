---
# Play to provision DB instances on EC2
- name: provision DB instances
  hosts:  local
  connection: local
  user: humphrey
  gather_facts: false

  vars_files:
    - vars/base.yml # Standard setup for all environments
    # assumes setup for environment is done at run time by
    - ../../personal.yml #Defines database PW

  vars:
    - keypair: galleria
    #t1.micro instance has no instance memory ans so incurs extra cost in ebs storage. avoiding complexity by using
    #smallest regular instance
    - instance_type:  m1.small
    - db_security_group: dbsecuritygroup
    - region: "eu-west-1"

  tasks:
  - name: What is the db password
    # Example that prints the loopback address and gateway for each host
    debug: msg="Password is (now) |{{ database_password }}| "

  # Basic postgres provisioning example
  # The db.t1.micro is slow to start at about 4-500 seconds
  - rds: >
      command=create
      instance_name={{ project_name }}
      db_engine=postgres
      size=10
      instance_type=db.t1.micro
      username=postgres_admin
      security_groups={{ db_security_group}}
      region={{ region }}
      password={{ database_password }}
      wait=true
      wait_timeout=900
    register: ec2_db

  - name: Display all variables/facts known for a host
    debug: var=hostvars[inventory_hostname]
    with_items: ec2_db.instances

  # Typically only get one endpoint and found it difficult to iterate through DB instances
  # Add it to the inventory file
  - name: Add endpoint to inventory file
    local_action: lineinfile dest={{ deploy_file }} 
      regexp="^database_endpoint" 
      line="database_endpoint={{ ec2_db.instance.endpoint }}"

  # Secondly add it as a current variable so that subsequent playbooks can use it
- hosts: local
  vars:
        database_endpoint: "{{ ec2_db.instance.endpoint }}"
